name: PR Test

on:
  pull_request:
    branches:
      - develop
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Shutdown Ubuntu MySQL
        run: sudo service mysql stop

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 8080
          container port: 3306
          mysql version: '8.0'
          mysql database: 'testdb'
          mysql user: 'test'
          mysql password: '1234'

      - name : check out
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Start MySQL
        run: sudo service mysql start

      - name: Init Database
        run: |
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE USER test@localhost IDENTIFIED BY "1234"'
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE testdb'
          mysql -uroot -h127.0.0.1 -proot -e 'GRANT ALL PRIVILEGES ON testdb.* TO test@localhost'
          
      - name: Install dependencies
        run: npm ci

      - name: Connect to Redis
        run: node client.js
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379

      # Gradle wrapper 파일 실행 권한주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
      
        run: > 
          SPRING_PROFILES_ACTIVE=test SPRING_PROFILES_INCLUDE="oauth, s3" 
          env_S3_ACCESS_KEY=$ACCESS 
          env_S3_SECRET_KEY=$SECRET 
          env_S3_BUCKET_NAME=$BUCKET 
          env_CLOUDFRONT_URL=$CLOUD 
          env_JWT_SECRET_KEY=$JWT_SECRET_KEY 
          env_JWT_REFRESH_KEY=$JWT_REFRESH_KEY 
          env_KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID
          env_KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI
          env_SMTP_USERNAME=$SMTP_USERNAME 
          env_SMTP_PASSWORD=$SMTP_PASSWORD 
          env_FIREBASE_PRIVATE_KEY_ID=$FIREBASE_PRIVATE_KEY_ID 
          env_FIREBASE_PRIVATE_KEY=$FIREBASE_PRIVATE_KEY 
          env_FIREBASE_CLIENT_EMAIL=$FIREBASE_CLIENT_EMAIL 
          env_FIREBASE_CLIENT_ID=$FIREBASE_CLIENT_ID 
          ./gradlew --info test
        env: 
          SECRET: ${{ secrets.S3_SECRET_KEY }}
          ACCESS: ${{ secrets.S3_ACCESS_KEY}}
          BUCKET: ${{ secrets.S3_BUCKET_NAME}}
          CLOUD: ${{ secrets.CLOUDFRONT_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_REFRESH_KEY: ${{ secrets.JWT_REFRESH_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}


      - name: Publish Unit Test Results # test 후 result를 보기 위해 추가
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }} # test가 실패해도 report를 남기기 위해 설정
        with:
          files: build/test-results/**/*.xml
